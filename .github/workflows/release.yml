name: Release
on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Rust ${{ matrix.rust }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
#          - os: macos-latest
#            target: x86_64-apple-darwin
#            suffix: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch-deb: amd64
            arch-rpm: x86_64
            suffix: ''
#          - os: windows-latest
#            target: x86_64-pc-windows-msvc
#            suffix: .exe
    env:
      RUST_BACKTRACE: full
      RUSTV: stable
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        id: rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt
          override: true
      - name: Install protoc
        run: sudo apt-get install -y protobuf-compiler
      - name: Install cargo-get
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-get
      - name: Install cargo-deb
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-deb
      - name: Install cargo-generate-rpm
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-generate-rpm
      - name: Cargo Cache
        uses: actions/cache@v4
        id: cache
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry/
            target/
          key: ${{ runner.os }}-cargo-release
          restore-keys: |
            ${{ runner.os }}-registry
      - name: Release build
        id: build
        run: cargo build --release
      - name: Create rpm
        if: ${{ matrix.os }} == "ubuntu-latest"
        id: rpm-generate
        run: cargo generate-rpm
      - name: Create deb
        id: deb-generate
        if: ${{ matrix.os }} == "ubuntu-latest"
        run: cargo deb
      - name: Version
        run: echo "::set-output name=version::$(cargo get version)"
        id: version
      - name: Changelog
        uses: Bullrich/generate-release-changelog@master
        id: changelog
        env:
          REPO: ${{ github.repository }}
      - name: Create Release
        uses: actions/create-release@v1
        id: create-release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload deb to release
        id: deb-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./target/debian/wirespider_${{ steps.version.outputs.version }}_${{ matrix.arch-deb }}.deb
          asset_name: wirespider-${{ steps.version.outputs.version }}_${{ matrix.arch-deb }}.deb
          asset_content_type: application/vnd.debian.binary-package; charset=binary
      - name: Upload rpm to release
        id: rpm-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./target/generate-rpm/wirespider-${{ steps.version.outputs.version }}-1.${{ matrix.arch-rpm }}.rpm
          asset_name: wirespider-${{ steps.version.outputs.version }}-1.${{ matrix.arch-rpm }}.rpm
          asset_content_type: application/x-rpm; charset=binary
      - name: Upload release binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./target/release/wirespider${{ matrix.suffix }}
          asset_name: wirespider-${{ steps.version.outputs.version }}-${{ matrix.arch-deb }}
          asset_content_type: application/x-pie-executable; charset=binary
      - name: Update APT repo
        uses: peternewman/apt-repo-action@globs
        id: apt-repo
        with:
          github_token: ${{ github.token }}
          repo_supported_arch: |
            amd64
            i386
          repo_supported_version: stable
          file: ./target/debian/wirespider_${{ steps.version.outputs.version }}_${{ matrix.arch-deb }}.deb
          file_target_version: stable
          public_key: ${{ secrets.APT_REPO_PUBKEY }}
          private_key: ${{ secrets.APT_REPO_PRIVKEY }}
          key_passphrase: ${{ secrets.APT_REPO_KEY_PASSPHRASE }}
